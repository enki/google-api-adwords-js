<!DOCTYPE html>
<html>
  <!--
    Copyright 2011, Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    author: api.anash@gmail.com (Anash P. Oommen)
  -->
  <head>
    <title>google.ads.common tests - google.ads.common.AdsUser</title>
    <script src="../../../../../closure/goog/base.js"></script>
    <script src="../../../../../adwordsapi/src/awapi.js"></script>
    <script>
      goog.require('goog.array');
      goog.require('goog.testing.jsunit');
      goog.require('goog.testing.recordFunction');

      goog.require('google.ads.common.AdsUser');
      goog.require('google.ads.common.ServiceFactory');
      goog.require('google.ads.common.ServiceRegistry');
      goog.require('google.ads.common.ServiceSignature');
      goog.require('google.ads.common.Service');
      goog.require('google.system.soap.ServiceListener');
    </script>
  </head>
  <body>
    <script>
      var MockService = function() {
        google.ads.common.Service.call(this);
      };
      goog.inherits(MockService, google.ads.common.Service);

      var MockServiceRegistry = function() {
        google.ads.common.ServiceRegistry.call(this);
      };
      goog.inherits(MockServiceRegistry, google.ads.common.ServiceRegistry);

      var MockServiceFactory = function() {
        google.ads.common.ServiceFactory.call(this);
        this.service = new MockService();
      };
      goog.inherits(MockServiceFactory, google.ads.common.ServiceFactory);

      google.ads.common.ServiceFactory.prototype.createService = function(
          signature, serverUrl) {
        return this.service;
      };

      var MockListener = function() {
        google.system.soap.ServiceListener.call(this);
      };

      var config = {
        AdWordsApi: {
          EnableGzipCompression: true,
          UserAgent: 'test user agent',
          Email: 'test email',
          Password: 'test password',
          ClientEmail: 'test client email',
          DeveloperToken: 'test developer token',
          HttpWebTransport: 'google.system.net.HttpWebTransportForServerProxy',
          HttpWebTransportSettings: {
            ProxyUrl: '/awapijs/proxy.php'
          }
        }
      };

      var registry;
      var signature;
      var user;
      var listener;

      /**
       * Initialize the test case.
       */
      function setUp() {
        signature = new google.ads.common.ServiceSignature('testversion',
            'MockService',
            google.ads.common.ServiceSignature.SupportedProtocols.SOAP);
        registry = new MockServiceRegistry();
        registry.registerServiceFactory(signature, MockServiceFactory);
        user = new google.ads.common.AdsUser(config, registry);
        listener = new MockListener();
      }

      /**
       * Cleanup the test case.
       */
      function tearDown() {
      }

      /*
       * Test if we can create a service instance using getService().
       */
      function testGetService() {
        var service = user.getService(signature, null);
        assertTrue(service instanceof MockService);
      }

      /*
       * Test if we can register a listener, retrieve it and remove it.
       */
      function testAddingAndRemovingListener() {
        var listeners = null;

        user.registerListener(listener);
        listeners = user.getListeners();
        assertNotNullNorUndefined(listeners);
        assertEquals(listeners.length, 1);
        assertObjectEquals(listeners[0], listener);

        user.removeListener(listener);
        listeners = user.getListeners();
        assertNotNullNorUndefined(listeners);
        assertEquals(listeners.length, 0);
      }

      /*
       * Test if we can get the config object from the service.
       */
      function testGetConfig() {
        assertObjectEquals(user.getConfig(), config);
      }
    </script>
  </body>
</html>
