<!DOCTYPE html>
<html>
  <!--
    Copyright 2011, Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    author: api.anash@gmail.com (Anash P. Oommen)
  -->
  <head>
    <title>google.ads.common tests - google.system.soap.Service</title>
    <script src="../../../../../closure/goog/base.js"></script>
    <script src="../../../../../adwordsapi/src/awapi.js"></script>
    <script>
      goog.require('goog.array');
      goog.require('goog.net.XhrIo');
      goog.require('goog.testing.jsunit');
      goog.require('goog.testing.recordFunction');

      goog.require('google.ads.common.AuthToken');
      goog.require('google.ads.common.AppConfigBase');
      goog.require('google.system.net.HttpWebTransport');
    </script>
  </head>
  <body>
    <script>
      // Define a mock transport so we can get and set the requests and
      // response.
      MockTransport = function(settings) {
        google.system.net.HttpWebTransport.call(this, settings);
      };
      goog.inherits(MockTransport, google.system.net.HttpWebTransport);

      MockTransport.urlToExpect = 'https://www.google.com/accounts/ClientLogin';
      MockTransport.methodToExpect = 'POST';
      MockTransport.contentToExpect = null;
      MockTransport.headersToExpect = null;
      MockTransport.timeoutIntervalToExpect = 0;

      MockTransport.shouldSucceed = true;
      MockTransport.responseToSend = null;

      MockTransport.prototype.send = function(url, method, content, headers,
          timeoutInterval, onSuccess, onFailure) {
        assertEquals(MockTransport.urlToExpect, url);
        assertEquals(MockTransport.methodToExpect, method);
        assertEquals(MockTransport.contentToExpect, content);
        assertEquals(MockTransport.headersToExpect, headers);
        assertEquals(MockTransport.timeoutIntervalToExpect, timeoutInterval);

        if (MockTransport.shouldSucceed) {
          onSuccess(MockTransport.responseToSend);
        } else {
          onFailure(MockTransport.responseToSend);
        }
      };

      var config = {
        TestKey: 'TestValue',
        HttpWebTransport: 'MockTransport',
        HttpWebTransportSettings: {
        }
      };

      var appConfig;
      var service;
      var email;
      var password;
      var authToken;

      /**
       * Initialize the test case.
       */
      function setUp() {
        service = 'adwords';
        email = 'test email';
        password = 'test password';
        appConfig = new google.ads.common.AppConfigBase();
        appConfig.readSettings(config);

        authToken = new google.ads.common.AuthToken(appConfig, service, email,
            password);
      }

      /**
       * Cleanup the test case.
       */
      function tearDown() {
      }

      /**
       * Test if we can call a method with a complex parameter and get back a
       * complex object as response.
       */
      function testGetAuthToken() {
        var contentToExpect = [
          'accountType=GOOGLE&Email=test%20email&Passwd=test%20password',
          '&service=adwords&source=Google-null-null-0.0.0'
        ].join('');

        var responseToSend = [
           'SID=SIDValue',
           'LSID=LSIDValue',
           'Auth=AuthTokenValue'
        ].join('\n');

        MockTransport.contentToExpect = contentToExpect;
        MockTransport.responseToSend = responseToSend;
        MockTransport.shouldSucceed = true;
        authToken.getToken(function(token) {
          assertEquals(token, 'AuthTokenValue');
        }, function(error) {
          fail('This call is expected to succeed, so failure callback ' +
              'should not be called.');
        });
      }

      /**
       * Test if we can call a method with a complex parameter and get back a
       * complex object as response.
       */
      function testFailGetAuthToken() {
        var contentToExpect = [
          'accountType=GOOGLE&Email=test%20email&Passwd=test%20password',
          '&service=adwords&source=Google-null-null-0.0.0'
        ].join('');

        var responseToSend = [
           'Error=BadAuthentication'
        ].join('\n');

        MockTransport.contentToExpect = contentToExpect;
        MockTransport.responseToSend = responseToSend;
        MockTransport.shouldSucceed = false;
        authToken.getToken(function(token) {
          fail('This call is expected to fail, so failure callback ' +
              'should not be called.');
        }, function(error) {
          assertEquals(error.getMessage(), 'AuthToken login failed. See ' +
              'ErrorCode for more details.');
          assertEquals(error.getErrorCode(), 'BadAuthentication');
        });
      }

      /**
       * Test for an expected exception to be thrown in case the transport
       * can't be instanciated.
       */
      function testNonExistentTransport() {
        var appConfig = new google.ads.common.AppConfigBase();
        appConfig.readSettings({
          HttpWebTransport: 'InvalidTransport',
          HttpWebTransportSettings: {}
        });
        var authToken = new google.ads.common.AuthToken(appConfig, service,
            email, password);
        authToken.getToken(function () {
          assertTrue(false);
        }, function (exception) {
          // This is the expected path.
          assertTrue(exception instanceof google.ads.common.AdsException);
        });
      }
    </script>
  </body>
</html>
